=================
dolmen.forms.crud
=================

:py:module:`dolmen.forms.crud` is a module which helps developers create their
C.R.U.D forms using :py:module:`crom` and `dolmen.forms`. It
provides a collection of base classes to add, edit, and access
content. It provides adapters to customize the fields of a form.


Setting up the components
=========================

Configuration of the package
----------------------------

  >>> from crom import testing
  >>> testing.setup()

  >>> import crom
  >>> from dolmen.forms import base, ztk
  >>> crom.configure(base, ztk)


  >>> logger = []
  >>> from zope.event import subscribers as event_subscribers
  >>> event_subscribers.append(logger.append)

  >>> from dolmen.forms.ztk.fields import registerDefault
  >>> registerDefault()


Adding a base URL resolver
--------------------------

  >>> from crom import implicit
  >>> from cromlech.browser import IURL, IRequest
  >>> from zope.interface import Interface

  >>> def absolute_url(object, request):
  ...    baseurl = 'http://localhost'
  ...    name = getattr(object, '__name__', '')
  ...    if name is None:
  ...        return baseurl
  ...    return baseurl + '/' + name

  >>> implicit.lookup.register((Interface, IRequest), IURL, '', absolute_url)


Defining some actors
--------------------

  >>> import zope.schema
  >>> from zope.interface import implementer
  >>> from zope.location import ILocation, Location


  >>> class IDesertWarrior(Interface):
  ...     """Defines a warrior living in the desert.
  ...     """
  ...     title = zope.schema.TextLine(
  ...         title=u"Name of the warrior",
  ...         default=u"",
  ...         required=True)
  ... 
  ...     water = zope.schema.Int(
  ...         title=u"Number water gallons owned",
  ...         default=1,
  ...         required=True)


  >>> class Sietch(Location):
  ...    """A grotto located on Arrakis.
  ...    """
  ...    def __init__(self):
  ...      self.contents = {}
  ...
  ...    def __getitem__(self, name):
  ...      return self.contents.__getitem__(name)
  ...
  ...    def __contains__(self, name):
  ...      return self.contents.__contains__(name)
  ...
  ...    def __delitem__(self, name):
  ...       return self.contents.__delitem__(name)
  ...
  ...    def keys(self):
  ...       return self.contents.keys()


  >>> @implementer(IDesertWarrior)
  ... class Fremen(Location):
  ...     """Inhabitants on the deep deserts. They live in sietches.
  ...     """
  ...
  ...     def __init__(self, title=u"", water=1):
  ...         self.title = title
  ...         self.water = water


Creation of the root
--------------------

  >>> from cromlech.browser.interfaces import IPublicationRoot
  >>> from zope.location import Location
  >>> from zope.interface import directlyProvides

  >>> root = Sietch()
  >>> directlyProvides(root, IPublicationRoot)


Adding component
================

:py:module:`dolmen.forms.crud` provides an abstraction for the 'adding'
action. It allows pluggability at the container level and handles
naming and persistence. This 'adding' action is prototyped by an
interface called `IAdding` and precised in the `IFactoryAdding`.

  >>> from dolmen.forms.crud import IFactoryAdding
  >>> from zope.interface import verify

  >>> @implementer(IFactoryAdding)
  ... class Adding(object):
  ...     """The component capable of adding objects using a factory
  ...
  ...     objects id are incremental
  ...     """
  ...
  ...     def __init__(self, context, request, factory):
  ...         self.context = context
  ...         self.request = request
  ...         self.factory = factory
  ...
  ...     def add(self, obj):
  ...         id = str(len(self.context.contents) + 1)
  ...         self.context.contents[id] = obj
  ...         obj.__name__ = id
  ...         obj.__parent__ = self.context
  ...         return obj

  >>> verify.verifyClass(IFactoryAdding, Adding)
  True

  >>> from cromlech.content import Factory
  >>> factory = Factory(Fremen)

  >>> from cromlech.browser.testing import TestRequest, TestResponse

  >>> request = TestRequest()
  >>> adding = Adding(root, request, factory)
  
  >>> verify.verifyObject(IFactoryAdding, adding)
  True
  

Let's create and register a very basic generic crud
add form, context of the form is our adding component:

  >>> import dolmen.forms.crud as crud
  >>> from cromlech.browser import IRequest
  >>> from dolmen.forms.base import form_component

  >>> @form_component
  ... @crom.sources(IRequest, IFactoryAdding)
  ... class AddForm(crud.Add):
  ...     '''Generic add form.
  ...     '''
  ...     responseFactory = TestResponse

.. note::
    we put the decorators as we normaly need them when using
    :py:module:`crom`, but here we won't configure,
    and just instanciate manually.

  >>> addform = AddForm(adding, request)
  >>> addform
  <...AddForm object at ...>

  >>> naib = Fremen()
  >>> added_item = adding.add(naib)
  >>> added_item
  <...Fremen object at ...>

The created content is correctly located::

  >>> added_item.__parent__ is root
  True


Generic forms
=============

Create
------

The add form implementation is tightly tied to the adding view. As the add
form behavior has been mostly covered above, we'll only test the
presence of the fields and actions on the form itself::

  >>> addform.fields.keys()
  ['title', 'water']
  
  >>> addform.updateForm()
  >>> for action in addform.actions: print(action)
  <AddAction Add>
  <CancelAction Cancel>


Update
------

An edit form can be registered simply by sublassing the Edit base class::

  >>> @form_component
  ... @crom.sources(IRequest, Fremen)
  ... class EditForm(crud.Edit):
  ...     '''Generic edit form.
  ...     '''
  ...     responseFactory = TestResponse

This form registered, we can check if all the fields are ready to be
edited::

  >>> post = TestRequest(form={
  ...     'form.field.water': '25',
  ...     'form.field.title': 'Stilgar',
  ...     'form.action.update': 'Update'},
  ...	  method='POST')

  >>> editform = EditForm(naib, post)
  >>> editform
  <...EditForm object at ...>

  >>> editform.update()
  >>> editform.updateForm()  # doctest: +ELLIPSIS
  Traceback (most recent call last):
  ...  
  cromlech.browser.exceptions.HTTPFound: http://localhost/1

  >>> editform.fields.keys()
  ['title', 'water']

As we called updateForm, the values should now be set::

  >>> naib.title
  'Stilgar'
  >>> naib.water
  25


The events logger is now filled with FieldUpdatedEvent (one for each field).
It eventually has the ObjectModifiedEvent that sums up what happened :

  >>> from zope.schema.fieldproperty import FieldUpdatedEvent
  >>> fields_events = [e for e in logger if isinstance(e, FieldUpdatedEvent)]
  >>> assert len(fields_events) == 10

  >>> for e in fields_events: print(e.inst.title)
  Name of the warrior
  Name of the warrior
  Name of the warrior
  Name of the warrior
  Name of the warrior
  Name of the warrior
  Number water gallons owned
  Number water gallons owned
  Number water gallons owned
  Number water gallons owned

  >>> print(logger[-1])
  <zope.lifecycleevent.ObjectModifiedEvent object at ...>
  >>> logger = logger[:]


Read
-----

A special kind of form allows you display your content::

  >>> @form_component
  ... @crom.sources(IRequest, Fremen)
  ... class DefaultView(crud.Display):
  ...     '''Generic display form.
  ...     '''
  ...     responseFactory = TestResponse
  
  >>> view = DefaultView(naib, request)
  >>> view
  <...DefaultView object at ...>

The Display form removes the 'title' from the list of fields. This
particular attribute is used directly by the template::

  >>> view.fields.keys()
  ['water']

A display form has no actions::

  >>> len(view.actions)
  0

`dolmen.forms.crud` provides a very basic template for that form. As
we can see, the title attribute is used as the HTML header (h1) of the
page::

  >>> print(view())  # doctest: +NORMALIZE_WHITESPACE
  <html>
    <head>
    </head>
    <body>
      <form action="http://localhost/1/"
            id="form" method="post"
            enctype="multipart/form-data">
        <h1>Stilgar</h1>
        <div class="fields">
          <div class="field">
            <label class="field-label" for="form-field-water">Number water gallons owned</label>
            <span class="field-required" >(required)</span>
               25
          </div>
        </div>
      </form>
    </body>
  </html>

Delete
------

A delete form is a simple form with no fields, that only provides a
'confirm' action::

  >>> @form_component
  ... @crom.sources(IRequest, Fremen)
  ... class DeleteForm(crud.Delete):
  ...     '''Generic delete form.
  ...     '''
  ...     responseFactory = TestResponse

  >>> deleteform = DeleteForm(naib, request)
  >>> deleteform
  <...DeleteForm object at ...>

  >>> deleteform.updateForm()
  >>> for action in deleteform.actions: print(action)
  <DeleteAction Delete>
  <CancelAction Cancel>

  >>> len(deleteform.fields)
  0

When confirmed, the form tries to delete the object::

  >>> post = TestRequest(form={
  ...     'form.action.delete': 'Delete'},
  ...	  method='POST',
  ...     )

  >>> list(root.keys())
  ['1']

  >>> deleteform = DeleteForm(naib, post)
  >>> deleteform.update()
  >>> deleteform.updateForm()
  Traceback (most recent call last):
  ...  
  cromlech.browser.exceptions.HTTPFound: http://localhost

  >>> from cromlech.i18n import translate
  >>> translate(deleteform.status)
  'The object has been deleted.'

  >>> list(root.keys())
  []


Events and field updates
========================

When using the generic :py:module:`dolmen.forms.crud` forms, some events are
triggered for you. They represent the lifecycle of the manipulated object.

To check on all the events triggered, we can set up a simple event
logging list and a generic handler::


Editing events
--------------

Let's have the same introspection check with the edit form::

We provide data for the update::

  >>> request = TestRequest(form={
  ...     'form.field.water': '10',
  ...     'form.field.title': 'Sihaya',
  ...     'form.action.update': 'Update'},
  ...	  method='POST',
  ...     )

  >>> chani = Fremen()
  >>> chani.__name__ = 'Chani'
  >>> chani.__parent__ = root

  >>> editform = EditForm(chani, request)
  >>> editform.update()
  >>> editform.updateForm()
  Traceback (most recent call last):
  ...  
  cromlech.browser.exceptions.HTTPFound: http://localhost/Chani


We check the trigged events::

  >>> print(logger[-1])
  <zope.lifecycleevent.ObjectModifiedEvent object at ...>

In depth, we can check if the updated fields are correctly set in the
event's descriptions::

  >>> for desc in logger[-1].descriptions:
  ...   print("%r: %s" % (desc.interface, sorted(desc.attributes)))
  <InterfaceClass __main__.IDesertWarrior>: ['title', 'water']

  >>> chani.title
  'Sihaya'
  >>> chani.water
  10
